resources:
  repositories:
    - repository: pipeline-templates
      type: github
      name: lsportsltd/devops-pipeline-templates
      endpoint: lsportsltd

trigger: none

stages:
  - template: general/generic-package-CICD.yaml@pipeline-templates
    parameters: 
      packageManager: 'npm'
      language: 'nodejs'
      languageVersion: '20'
      artifactImageLocation: '/usr/src/app/'
      serviceName: 'trade360_nodejs_sdk'

  - stage: PublishToNPM
    displayName: 'Publish to NPM Registry'
    dependsOn: BuildAndDeployPackage_trade360_nodejs_sdk
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - job: PublishPackage
        pool: k8s-agents-ci
        displayName: 'Publish NPM Package'
        steps:
          - checkout: self
            persistCredentials: true
            clean: true

          - script: |
              echo "Starting NPM publish process..."
              
              # Get NPM token from SSM
              NPM_AUTOMATION_TOKEN=$(aws ssm get-parameter --name "/devopsr/npm/automation-token" --with-decryption --query "Parameter.Value" --output text)
              
              if [ -z "$NPM_AUTOMATION_TOKEN" ]; then
                echo "Error: NPM_AUTOMATION_TOKEN is empty"
                exit 1
              fi
              
              echo "Configuring NPM..."
              # Configure NPM authentication using automation token
              echo "//registry.npmjs.org/:_authToken=${NPM_AUTOMATION_TOKEN}" > ~/.npmrc
              echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
              
              echo "Setting up build environment..."
              # Ensure we're in the correct directory and files are in place
              pwd
              ls -la
              
              echo "Installing dependencies..."
              npm ci
              
              echo "Building package..."
              npm run build
              
              echo "Publishing to NPM..."
              npm publish --access public
              
              if [ $? -eq 0 ]; then
                echo "Successfully published to NPM"
                # Create the status file in the correct location
                mkdir -p /tmp/trade360-nodejs-sdk/app/dist
                touch /tmp/trade360-nodejs-sdk/app/dist/deploy_status_done_npm
              else
                echo "Failed to publish to NPM"
                exit 1
              fi
            displayName: 'Publish to NPM'

name: Codacy Coverage

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test-and-report:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run tests and collect coverage
        run: npx jest --coverage

      - name: Upload coverage to Codacy
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage/lcov.info
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}

  - stage: CodacyCoverage
    displayName: 'Codacy Coverage'
    dependsOn: []
    jobs:
      - job: ReportCoverage
        displayName: 'Report Coverage to Codacy'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Set up Node.js'
          - script: npm ci
            displayName: 'Install dependencies'
          - script: npx jest --coverage
            displayName: 'Run tests and collect coverage'
          - task: Bash@3
            displayName: Create And Publish Codacy Report
            condition: succeeded()
            inputs:
              targetType: 'inline'
              script: |
                # Fetch Codacy API token from AWS SSM
                export CODACY_API_TOKEN=$(aws ssm get-parameter --with-decryption --name /devops/token/codacy | jq -r .Parameter.Value)
                export CODACY_ORGANIZATION_PROVIDER=gh
                export CODACY_USERNAME=lsportsltd
                export CODACY_PROJECT_NAME=$(cut -d'/' -f2 <<<"$(Build.Repository.Name)")
                bash <(curl -Ls https://coverage.codacy.com/get.sh) report -l JavaScript -r coverage/lcov.info