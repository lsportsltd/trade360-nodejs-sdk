import { StatisticType } from '../../../../src/entities/core-entities/enums/statistic-type';

describe('StatisticType Enum', () => {
  it('should map names to values correctly', () => {
    expect(StatisticType.NotSet).toBe(0);
    expect(StatisticType.Corners).toBe(1);
    expect(StatisticType.ShotsOnTarget).toBe(2);
    expect(StatisticType.ShotsOffTarget).toBe(3);
    expect(StatisticType.Attacks).toBe(4);
    expect(StatisticType.DangerousAttacks).toBe(5);
    expect(StatisticType.YellowCard).toBe(6);
    expect(StatisticType.RedCard).toBe(7);
    expect(StatisticType.Penalties).toBe(8);
    expect(StatisticType.Goal).toBe(9);
    expect(StatisticType.Substitutions).toBe(10);
    expect(StatisticType.Possession).toBe(11);
    expect(StatisticType.Fouls).toBe(12);
    expect(StatisticType.FreeKicks).toBe(13);
    expect(StatisticType.GoalKicks).toBe(14);
    expect(StatisticType.Offsides).toBe(15);
    expect(StatisticType.BlockedShots).toBe(16);
    expect(StatisticType.ThrowIns).toBe(17);
    expect(StatisticType.WoodworkShots).toBe(18);
    expect(StatisticType.Clearance).toBe(19);
    expect(StatisticType.Aces).toBe(20);
    expect(StatisticType.DoubleFaults).toBe(21);
    expect(StatisticType.ServicePoints).toBe(22);
    expect(StatisticType.BreakPoints).toBe(23);
    expect(StatisticType.OwnGoal).toBe(24);
    expect(StatisticType.PenaltyGoal).toBe(25);
    expect(StatisticType.Score).toBe(27);
    expect(StatisticType.TwoPoints).toBe(28);
    expect(StatisticType.PCT).toBe(29);
    expect(StatisticType.ThreePoints).toBe(30);
    expect(StatisticType.TimeOuts).toBe(31);
    expect(StatisticType.FreeThrows).toBe(32);
    expect(StatisticType.Hits).toBe(33);
    expect(StatisticType.FirstServeWins).toBe(34);
    expect(StatisticType.Ball).toBe(35);
    expect(StatisticType.WicketTaken).toBe(36);
    expect(StatisticType.WideBall).toBe(37);
    expect(StatisticType.NoBall).toBe(38);
    expect(StatisticType.LegBye).toBe(39);
    expect(StatisticType.MissedPenalty).toBe(40);
    expect(StatisticType.Cards).toBe(41);
  });

  it('should map values to names correctly (reverse mapping)', () => {
    expect(StatisticType[0]).toBe('NotSet');
    expect(StatisticType[1]).toBe('Corners');
    expect(StatisticType[2]).toBe('ShotsOnTarget');
    expect(StatisticType[3]).toBe('ShotsOffTarget');
    expect(StatisticType[4]).toBe('Attacks');
    expect(StatisticType[5]).toBe('DangerousAttacks');
    expect(StatisticType[6]).toBe('YellowCard');
    expect(StatisticType[7]).toBe('RedCard');
    expect(StatisticType[8]).toBe('Penalties');
    expect(StatisticType[9]).toBe('Goal');
    expect(StatisticType[10]).toBe('Substitutions');
    expect(StatisticType[11]).toBe('Possession');
    expect(StatisticType[12]).toBe('Fouls');
    expect(StatisticType[13]).toBe('FreeKicks');
    expect(StatisticType[14]).toBe('GoalKicks');
    expect(StatisticType[15]).toBe('Offsides');
    expect(StatisticType[16]).toBe('BlockedShots');
    expect(StatisticType[17]).toBe('ThrowIns');
    expect(StatisticType[18]).toBe('WoodworkShots');
    expect(StatisticType[19]).toBe('Clearance');
    expect(StatisticType[20]).toBe('Aces');
    expect(StatisticType[21]).toBe('DoubleFaults');
    expect(StatisticType[22]).toBe('ServicePoints');
    expect(StatisticType[23]).toBe('BreakPoints');
    expect(StatisticType[24]).toBe('OwnGoal');
    expect(StatisticType[25]).toBe('PenaltyGoal');
    expect(StatisticType[27]).toBe('Score');
    expect(StatisticType[28]).toBe('TwoPoints');
    expect(StatisticType[29]).toBe('PCT');
    expect(StatisticType[30]).toBe('ThreePoints');
    expect(StatisticType[31]).toBe('TimeOuts');
    expect(StatisticType[32]).toBe('FreeThrows');
    expect(StatisticType[33]).toBe('Hits');
    expect(StatisticType[34]).toBe('FirstServeWins');
    expect(StatisticType[35]).toBe('Ball');
    expect(StatisticType[36]).toBe('WicketTaken');
    expect(StatisticType[37]).toBe('WideBall');
    expect(StatisticType[38]).toBe('NoBall');
    expect(StatisticType[39]).toBe('LegBye');
    expect(StatisticType[40]).toBe('MissedPenalty');
    expect(StatisticType[41]).toBe('Cards');
  });

  it('should contain all expected enum keys', () => {
    const keys = Object.keys(StatisticType).filter((k) => isNaN(Number(k)));
    expect(keys).toEqual([
      'NotSet',
      'Corners',
      'ShotsOnTarget',
      'ShotsOffTarget',
      'Attacks',
      'DangerousAttacks',
      'YellowCard',
      'RedCard',
      'Penalties',
      'Goal',
      'Substitutions',
      'Possession',
      'Fouls',
      'FreeKicks',
      'GoalKicks',
      'Offsides',
      'BlockedShots',
      'ThrowIns',
      'WoodworkShots',
      'Clearance',
      'Aces',
      'DoubleFaults',
      'ServicePoints',
      'BreakPoints',
      'OwnGoal',
      'PenaltyGoal',
      'Score',
      'TwoPoints',
      'PCT',
      'ThreePoints',
      'TimeOuts',
      'FreeThrows',
      'Hits',
      'FirstServeWins',
      'Ball',
      'WicketTaken',
      'WideBall',
      'NoBall',
      'LegBye',
      'MissedPenalty',
      'Cards',
    ]);
  });
});
